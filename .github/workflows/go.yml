name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        cd conntrack_accounting_tool
        go get -v -t
        cd ../conntrack_psql_insert
        go get -v -t
        

    - name: Build
      run: |
        mkdir -p conntrack-accounting
        cd conntrack_accounting_tool
        go build -v -ldflags "-extldflags '-static'" -o ../conntrack-accounting/conntrack_accounting
        cd ../conntrack_psql_insert
        go build -v -ldflags "-extldflags '-static'" -o ../conntrack-accounting/psql_insert
        cd ..
        zip conntrack-accounting.zip conntrack-accounting/*_*
        
    #- name: Test
    #  run: go test -v -ldflags "-extldflags '-static'" .
  
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2.1.4
      with:
        # Artifact name
        name: binaries
        # A file, directory or wildcard pattern that describes what to upload
        path: conntrack-accounting/*
        if-no-files-found: error
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: ${{ github.ref }}
        # The name of the release. For example, `Release v1.0.1`
        release_name: Release ${{ github.ref }}
        # Text describing the contents of the tag.
        body: Automatic release
        # Path to file with information about the tag.
        #body_path: # optional
        # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
        draft: true
        # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
        prerelease: true
        # Any branch or commit SHA the Git tag is created from, unused if the Git tag already exists. Default: SHA of current commit
        #commitish: # optional
        # Owner of the repository if it is not the current one
        #owner: # optional
        # Repository on which to release.  Used only if you want to create the release on another repo
        #repo: # optional

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./conntrack-accounting.zip
        asset_name: conntrack-accounting.zip
        asset_content_type: application/zip
