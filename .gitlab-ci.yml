image: golang:latest

variables:
  # Please edit to your GitLab project
  #REPO_NAME: gitlab.com/namespace/project

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  #- mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  #- ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  #- cd $GOPATH/src/$REPO_NAME

stages:
#  - test
  - build
  - deploy

#format:
#  stage: test
#  script:
    #- go fmt $(go list ./... | grep -v /vendor/)
    #- $CI_PROJECT_DIR/conntrack_accounting && go vet $(go list ./... | grep -v /vendor/)
    #- $CI_PROJECT_DIR/psql_insert          && go vet $(go list ./... | grep -v /vendor/)
    #- go test -race $(go list ./... | grep -v /vendor/)

compile-accounting-tool:
  stage: build
  script:
    - cd conntrack_accounting_tool
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/conntrack_accounting
  artifacts:
    paths:
      - conntrack_accounting

compile-psql-insert:
  stage: build
  script:
    - cd conntrack_psql_insert
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/psql_insert
  artifacts:
    paths:
      - psql_insert
